Infra :
- Deployer un pod + service contenant ZAP en mode daemon (fichier prêt) lors du déploiement de l'infra
	WARNING : clé d'API ZAP probablement présente dans le fichier YAML (si on veut en mettre une)
- Deployer le service "inter namespace" de l'application pour la rendre accessible depuis le namespace default pendant les tests


Jenkinsfile :
- Créer un pod template avec une image python 
- Créer un stage ou on installe le SDK ZAP (pip install python-owasp-zap-v2.4’) et on run le script client zap en python 


A trouver :
- Comment pousser le script zap python (via GIT, ou aussi en buildant une image docker incluant l'install du sdk zap et de ce script)
- Comment rendre paramètrable ce script pour prendre en input : l'url ciblée et l'URL du daemon ZAP, la clé d'API
- Comment uploader les résultats dans un SONAR ou Jenkins






Script python :

#!/usr/bin/env python

import time
from pprint import pprint
from zapv2 import ZAPv2

target = "http://petclinic-frontend-defaultns"

apikey = '' # Change to match the API key set in ZAP, or use None if the API key is disabled

# By default ZAP API client will connect to port 8080
#zap = ZAPv2(apikey=apikey)
# Use the line below if ZAP is not listening on port 8080, for example, if listening on port 8090

zap = ZAPv2(apikey=apikey, proxies={"http": "http://zap-proxy-service:8090", "https": "http://zap-proxy-service:443"})

# do stuff
print ('Accessing target %s' % target)
# try have a unique enough session...
zap.urlopen(target)
# Give the sites tree a chance to get updated
time.sleep(2)

print ('Spidering target %s' % target)
scanid = zap.spider.scan(target)
# Give the Spider a chance to start
time.sleep(2)
while (int(zap.spider.status(scanid)) < 100):
            print ('Spider progress %: ' + zap.spider.status(scanid))
            time.sleep(2)

            print ('Spider completed')
            # Give the passive scanner a chance to finish
            time.sleep(5)

            print ('Scanning target %s' % target)
            scanid = zap.ascan.scan(target)
            while (int(zap.ascan.status(scanid)) < 100):
                        print ('Scan progress %: ' + zap.ascan.status(scanid))
                        time.sleep(5)

                        print ('Scan completed')

                        # Report the results

                        print ('Hosts: ' + ', '.join(zap.core.hosts))
                        print ('Alerts: ')
                        pprint (zap.core.alerts())   
